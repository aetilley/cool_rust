// build.rs uses this language specification to generate the parser ('cool_grammar.rs').

use crate::token::{Token, LexicalError};
use crate::ast::{Program, Classes, Class, Features, Feature, Expr, Exprs, Formals, Formal, Case, Cases};

grammar;

extern {
  type Location = usize;
  type Error = LexicalError;
  enum Token{
    ";" => Token::Semicolon,
    ":" => Token::Colon,
    "class" => Token::Class,
    "typeid" => Token::TypeId(<String>),
    "objectid" => Token::ObjectId(<String>),
    "bool_const" => Token::BoolConst(<bool>),
    "int_const" => Token::IntConst(<String>),
    "str_const" => Token::StrConst(<String>),
    "{" => Token::LCurly,
    "}" => Token::RCurly,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "<-" => Token::Assign,
    "," => Token::Comma,
    "new" => Token::New,
    "if" => Token::If,
    "then" => Token::Then,
    "else" => Token::Else,
    "fi" => Token::Fi,
    "of" => Token::Of,
    "while" => Token::While,
    "inherits" => Token::Inherits,
    "loop" => Token::Loop,
    "pool" => Token::Pool,
    "." => Token::Period,
    "@" => Token::At,
    "~" => Token::Comp,
    "isvoid" => Token::IsVoid,
    "=" => Token::Eq,
    "<" => Token::LT,
    "<=" => Token::LTE,
    "not" => Token::Not,
    "+" => Token::Plus,
    "-" => Token::Minus,
    "*" => Token::Times,
    "/" => Token::Divide,
    "let" => Token::Let,
    "in" => Token::In,
    "error" => Token::Error(_),
    "case" => Token::Case,
    "esac" => Token::Esac,
    "=>" => Token::DArrow,
  }
}

pub ProgramTy: Program = {
  <clist: ClassesTy> => Program::program(clist),
}

pub ClassTy: Class = {
  "class" <name: "typeid"> "{" <features: FeaturesTy> "}" ";"=> Class::class(name, "Object".to_string(), features),
  "class" <name: "typeid"> "inherits" <parent: "typeid"> "{" <features: FeaturesTy> "}" ";"=> Class::class(name, parent, features),
}

pub ClassesTy: Classes = {
  <c: ClassTy> => vec![c],
  <cs: ClassesTy> <c: ClassTy> => {
    let mut res = cs.clone();
    res.push(c);
    res
  },
}

pub FormalTy: Formal = {
  <name: "objectid"> ":" <typ: "typeid">  => Formal::formal(name, typ),
}

pub _SomeFormalsTy: Formals = {
  <f: FormalTy> => vec![f],
  <some: _SomeFormalsTy> "," <f: FormalTy> => {
    let mut res = some.clone();
    res.push(f);
    res
  }
}

pub FormalsTy: Formals = {
  () => vec![],
  <some: _SomeFormalsTy> => some,
}

pub FeatureTy: Feature = {
  <name: "objectid"> ":" <typ: "typeid"> ";" => Feature::attr(name, typ, Expr::no_expr()),
  <name: "objectid"> ":" <typ: "typeid"> "<-" <expr: ExprTy> ";" => Feature::attr(name, typ, expr),
  <name: "objectid"> "(" <formals: FormalsTy> ")" ":" <typ: "typeid"> "{" <expr: ExprTy> "}" ";" => Feature::method(name, formals, typ, expr), 
}

pub FeaturesTy: Features = {
  () => vec![],
  <fs: FeaturesTy> <f: FeatureTy>  => {
    let mut res = fs.clone();
    res.push(f);
    res
  },
}

pub ExprTy: Expr = {
  // Precedence 0
  #[precedence(level="0")]
  <name: "objectid"> => Expr::object(name),
  #[precedence(level="0")]
  <value: "int_const"> => Expr::int_const(value),
  #[precedence(level="0")]
  <value: "str_const"> => Expr::str_const(value),
  #[precedence(level="0")]
  <value: BoolConstTy> => Expr::bool_const(value),
  #[precedence(level="0")]
  "{" <exprs: ExprsWithSemicolonsTy> "}" => Expr::block(exprs),
  #[precedence(level="0")]
  "(" <expr: ExprTy> ")" => expr,
  #[precedence(level="0")]
  "new" <typ: "typeid"> => Expr::new(typ),
  #[precedence(level="0")]
  "if" <pred: ExprTy> "then" <then_expr: ExprTy> "else" <else_expr: ExprTy> "fi" => Expr::cond(pred, then_expr, else_expr),
  #[precedence(level="0")]
  "while" <cond: ExprTy> "loop" <body: ExprTy> "pool" => Expr::r#loop(cond, body),
  #[precedence(level="0")]
  <method_name: "objectid"> "(" <exprs: CommaSepExprsTy> ")" => Expr::dispatch(Expr::no_expr(), method_name, exprs),
  #[precedence(level="0")]
  "case" <expr: ExprTy> "of" <cases: CasesTy> "esac" => Expr::typcase(expr, cases),
  // #[precedence(level="0")]
  // <let_expr: LetExprTy> => let_expr,

  // Precedence 1
  #[precedence(level="1")] #[assoc(side="right")]
  <var: "objectid"> "<-" <expr: ExprTy> => Expr::assign(var, expr),

  // Precedence 2
  #[precedence(level="2")]
  "not" <e: ExprTy> => Expr::not(e),

  // Precedence 3
  #[precedence(level="3")] #[assoc(side="left")]
  <e1: ExprTy> "=" <e2: ExprTy> => Expr::eq(e1, e2),
  #[precedence(level="3")] #[assoc(side="left")]
  <e1: ExprTy> "<=" <e2: ExprTy> => Expr::leq(e1, e2),
  #[precedence(level="3")] #[assoc(side="left")]
  <e1: ExprTy> "<" <e2: ExprTy> => Expr::lt(e1, e2),

  // Precedence 4
  #[precedence(level="4")] #[assoc(side="left")]
  <e1: ExprTy> "+" <e2: ExprTy> => Expr::plus(e1, e2),
  #[precedence(level="4")] #[assoc(side="left")]
  <e1: ExprTy> "-" <e2: ExprTy> => Expr::minus(e1, e2),

  // Precedence 5
  #[precedence(level="5")] #[assoc(side="left")]
  <e1: ExprTy> "*" <e2: ExprTy> => Expr::times(e1, e2),
  #[precedence(level="5")] #[assoc(side="left")]
  <e1: ExprTy> "/" <e2: ExprTy> => Expr::divide(e1, e2),

  // Precedence 6
  #[precedence(level="6")]
  "isvoid" <expr: ExprTy> => Expr::isvoid(expr),

  // Precedence 7
  #[precedence(level="7")]
  "~" <expr: ExprTy> => Expr::comp(expr),

  // Precedence 8
  #[precedence(level="8")]
  <slf: ExprTy> "@" <typ: "typeid"> "." <method_name: "objectid"> "(" <exprs: CommaSepExprsTy> ")" => Expr::static_dispatch(slf, typ, method_name, exprs),

  // Precedence 9
  #[precedence(level="9")]
  <slf: ExprTy> "." <method_name: "objectid"> "(" <exprs: CommaSepExprsTy> ")" => Expr::dispatch(slf, method_name, exprs),
}

pub BoolConstTy: bool = {
  <value: "bool_const"> => value,
}

pub CommaSepExprsTy: Exprs = {
  () => vec![],
  <some: _SomeCommaSepExprTy> => some,
}

pub _SomeCommaSepExprTy: Exprs = {
  <e: ExprTy> => vec![e],
  <some: _SomeCommaSepExprTy> "," <f: ExprTy> => {
    let mut res = some.clone();
    res.push(f);
    res
  }
}

pub ExprsWithSemicolonsTy: Exprs = {
  <e: ExprTy> ";" => vec![e],
  <es: ExprsWithSemicolonsTy> <e: ExprTy> ";" => {
    let mut res = es.clone();
    res.push(e);
    res
  }
}

pub CaseTy : Case = {
  <name: "objectid"> ":" <typ: "typeid"> "=>" <expr: ExprTy> ";" => Case::case(name, typ, expr),
}

pub CasesTy: Cases = {
  <case: CaseTy> => vec![case],
  <cs: CasesTy> <c: CaseTy> => {
    let mut res = cs.clone();
    res.push(c);
    res
  }
}
