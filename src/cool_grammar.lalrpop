// build.rs uses this language specification to generate the parser ('cool_grammar.rs').

use crate::token::{Token, LexicalError, StringLiteralError};
use crate::ast::{add_one, Program, Classes, Class, Features, Feature, Expr, Exprs, Formals, Formal, Case, Cases, LetBinding, LetBindings};

grammar;

extern {
  type Location = usize;
  type Error = LexicalError;
  enum Token{
    ";" => Token::Semicolon,
    ":" => Token::Colon,
    "class" => Token::Class,
    "typeid" => Token::TypeId(<String>),
    "objectid" => Token::ObjectId(<String>),
    "bool_const" => Token::BoolConst(<bool>),
    "int_const" => Token::IntConst(<String>),
    "str_const" => Token::StrConst(<Result<String, StringLiteralError>>),
    "{" => Token::LCurly,
    "}" => Token::RCurly,
    "(" => Token::LParen,
    ")" => Token::RParen,
    "<-" => Token::Assign,
    "," => Token::Comma,
    "new" => Token::New,
    "if" => Token::If,
    "then" => Token::Then,
    "else" => Token::Else,
    "fi" => Token::Fi,
    "of" => Token::Of,
    "while" => Token::While,
    "inherits" => Token::Inherits,
    "loop" => Token::Loop,
    "pool" => Token::Pool,
    "." => Token::Period,
    "@" => Token::At,
    "~" => Token::Comp,
    "isvoid" => Token::IsVoid,
    "=" => Token::Eq,
    "<" => Token::LT,
    "<=" => Token::LTE,
    "not" => Token::Not,
    "+" => Token::Plus,
    "-" => Token::Minus,
    "*" => Token::Times,
    "/" => Token::Divide,
    "let" => Token::Let,
    "in" => Token::In,
    "error" => Token::Error(_),
    "case" => Token::Case,
    "esac" => Token::Esac,
    "=>" => Token::DArrow,
  }
}

pub ProgramTy: Program = {
  <clist: ClassesTy> => Program::program(clist),
}

pub ClassTy: Class = {
  "class" <name: "typeid"> "{" <features: FeaturesTy> "}" ";"=> Class::class(&name, "Object", features),
  "class" <name: "typeid"> "inherits" <parent: "typeid"> "{" <features: FeaturesTy> "}" ";"=> Class::class(&name, &parent, features),
}

pub ClassesTy: Classes = {
  <c: ClassTy> => vec![c],
  <cs: ClassesTy> <c: ClassTy> => add_one(&cs, &c),
}

pub FormalTy: Formal = {
  <name: "objectid"> ":" <typ: "typeid">  => Formal::formal(&name, &typ),
}

pub _SomeFormalsTy: Formals = {
  <f: FormalTy> => vec![f],
  <some: _SomeFormalsTy> "," <f: FormalTy> => add_one(&some, &f), 
}

pub FormalsTy: Formals = {
  () => vec![],
  <some: _SomeFormalsTy> => some,
}

pub FeatureTy: Feature = {
  <name: "objectid"> ":" <typ: "typeid"> ";" => Feature::attr(&name, &typ, Expr::no_expr()),
  <name: "objectid"> ":" <typ: "typeid"> "<-" <expr: ExprTy> ";" => Feature::attr(&name, &typ, expr),
  <name: "objectid"> "(" <formals: FormalsTy> ")" ":" <typ: "typeid"> "{" <expr: ExprTy> "}" ";" => Feature::method(&name, formals, &typ, expr), 
}

pub FeaturesTy: Features = {
  () => vec![],
  <fs: FeaturesTy> <f: FeatureTy>  => add_one(&fs, &f), 
}

pub ExprTy: Expr = {
  <e: Expr10Ty> => e,
}

pub Expr10Ty: Expr = {
  "{" <exprs: ExprsWithSemicolonsTy> "}" => Expr::block(exprs),
  "new" <typ: "typeid"> => Expr::new(&typ),
  "while" <cond: ExprTy> "loop" <body: ExprTy> "pool" => Expr::r#loop(cond, body),
  "case" <expr: ExprTy> "of" <cases: CasesTy> "esac" => Expr::typcase(expr, cases),
  "let" <let_bindings: LetBindingsTy> "in" <body: ExprTy> => LetBinding::unwrap_let_bindings(let_bindings, body),
  
  "if" <pred: ExprTy> "then" <then_expr: ExprTy> "else" <else_expr: ExprTy> "fi" => Expr::cond(pred, then_expr, else_expr),
  <e: Expr9Ty> => e,
}

  
pub Expr9Ty: Expr = {
  // Precedence 9
  <var: "objectid"> "<-" <expr: Expr9Ty> => Expr::assign(&var, expr),
  <e: Expr8Ty> => e,
}

pub Expr8Ty: Expr = {
  // Precedence 8
  "not" <e: Expr7Ty> => Expr::not(e),
  <e: Expr7Ty> => e,
}


pub Expr7Ty: Expr = {
  // Precedence 7
  <e1: Expr7Ty> "=" <e2: Expr6Ty> => Expr::eq(e1, e2),
  <e1: Expr7Ty> "<=" <e2: Expr6Ty> => Expr::leq(e1, e2),
  <e1: Expr7Ty> "<" <e2: Expr6Ty> => Expr::lt(e1, e2),
  <e: Expr6Ty> => e,
}


pub Expr6Ty: Expr = {
  // Precedence 6
  <e1: Expr6Ty> "+" <e2: Expr5Ty> => Expr::plus(e1, e2),
  <e1: Expr6Ty> "-" <e2: Expr5Ty> => Expr::minus(e1, e2),
  <e: Expr5Ty> => e,
}


pub Expr5Ty: Expr = {
  // Precedence 5
  <e1: Expr5Ty> "*" <e2: Expr4Ty> => Expr::times(e1, e2),
  <e1: Expr5Ty> "/" <e2: Expr4Ty> => Expr::divide(e1, e2),
  <e: Expr4Ty> => e,
}


pub Expr4Ty: Expr = {
  // Precedence 4
  "isvoid" <expr: Expr3Ty> => Expr::isvoid(expr),
  <e: Expr3Ty> => e,
}


pub Expr3Ty: Expr = {
  // Precedence 3
  "~" <expr: Expr2Ty> => Expr::comp(expr),
  <e: Expr2Ty> => e,
}


pub Expr2Ty: Expr = {
  // Precedence 2
  <slf: Expr1Ty> "@" <typ: "typeid"> "." <method_name: "objectid"> "(" <exprs: CommaSepExprsTy> ")" => Expr::static_dispatch(slf, &typ, &method_name, exprs),
  <method_name: "objectid"> "(" <exprs: CommaSepExprsTy> ")" => Expr::dispatch(Expr::no_expr(), &method_name, exprs),
  <e: Expr1Ty> => e,
}


pub Expr1Ty: Expr = {
  // Precedence 1
  <slf: Expr0Ty> "." <method_name: "objectid"> "(" <exprs: CommaSepExprsTy> ")" => Expr::dispatch(slf, &method_name, exprs),
  <e: Expr0Ty> => e,
}

pub Expr0Ty: Expr = {
  <name: "objectid"> => Expr::object(&name),
  <value: "int_const"> => Expr::int_const(&value),
  <maybe_value: "str_const"> => Expr::str_const(&maybe_value.unwrap()),
  <value: BoolConstTy> => Expr::bool_const(value),
  "(" <expr: ExprTy> ")" => expr,
}

pub BoolConstTy: bool = {
  <value: "bool_const"> => value,
}

pub CommaSepExprsTy: Exprs = {
  () => vec![],
  <some: _SomeCommaSepExprTy> => some,
}

pub _SomeCommaSepExprTy: Exprs = {
  <e: ExprTy> => vec![e],
  <some: _SomeCommaSepExprTy> "," <f: ExprTy> => add_one(&some, &f),
}

pub ExprsWithSemicolonsTy: Exprs = {
  <e: ExprTy> ";" => vec![e],
  <es: ExprsWithSemicolonsTy> <e: ExprTy> ";" => add_one(&es, &e),

}

pub CaseTy : Case = {
  <name: "objectid"> ":" <typ: "typeid"> "=>" <expr: ExprTy> ";" => Case::case(&name, &typ, expr),
}

pub CasesTy: Cases = {
  <case: CaseTy> => vec![case],
  <cs: CasesTy> <c: CaseTy> => add_one(&cs, &c),
}

pub LetBindingTy: LetBinding = {
  <id: "objectid"> ":" <typ: "typeid"> => LetBinding::let_binding(&id, &typ, Expr::no_expr()),
  <id: "objectid"> ":" <typ: "typeid"> "<-" <expr: ExprTy> => LetBinding::let_binding(&id, &typ, expr),
}

pub LetBindingsTy : LetBindings = {
  <binding: LetBindingTy> => vec![binding],
  <bs: LetBindingsTy> "," <b: LetBindingTy> => add_one(&bs, &b),
}
